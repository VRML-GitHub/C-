Gcc简介

Linux系统下的gcc（GNU C Compiler）是GNU推出的功能强大、性能优越的多平台编译器，是GNU的代表作品之一。gcc是可以在多种硬体平台上编译出可
执行程序的超级编译器，其执行效率与一般的编译器相比平均效率要高20%~30%。gcc 编译器能将C、C++语言源程序、汇程式化序和目标程序编译、连接
成可执行文件，如果没有给出可执行文件的名字，gcc将生成一个名为a.out的文件。 在Linux系统中，可执行文件没有统一的后缀，系统从文件的属性来
区分可执行文件和不可执行文件。而gcc则通过后缀来区别输入文件的类别，下面我们来介绍gcc所遵循的部分约定规则。

.c为后缀的文件:  C语言源代码文件；

.a为后缀的文件:  是由目标文件构成的档案库文件；

.C，.cc或.cxx 为后缀的文件:    是C++源代码文件；

.h为后缀的文件:  是程序所包含的头文件；

.i 为后缀的文件: 是已经预处理过的C源代码文件；

.ii为后缀的文件: 是已经预处理过的C++源代码文件；

.m为后缀的文件:  是Objective-C源代码文件；

.o为后缀的文件:  是编译后的目标文件；

.s为后缀的文件:  是汇编语言源代码文件；

.S为后缀的文件:  是经过预编译的汇编语言源代码文件。

gcc的执行过程

虽然我们称gcc是C语言的编译器，但使用gcc由C语言源代码文件生成可执行文件的过程不仅仅是编译的过程，而是要经历四个相互关联的步骤∶预处理(也
称 预编译，Preprocessing)、编译(Compilation)、汇编(Assembly)和连接(Linking)。命令 gcc首先调用cpp进行预处理，在预处理过程中，对源代码文
件中的文件包含(include)、预编译语句(如宏定义define等)进行分析。接着调 用cc1进行编译，这个阶段根据输入文件生成以.o为后缀的目标文件。汇编
过程是针对汇编语言的步骤，调用as进行工作，一般来讲，.S为后缀的汇编语言 源代码文件和汇编、.s为后缀的汇编语言文件经过预编译和汇编之后都生
成以.o为后缀的目标文件。当所有的目标文件都生成之后，gcc就调用ld来完成最 后的关键性工作，这个阶段就是连接。在连接阶段，所有的目标文件被
安排在可执行程序中的恰当的位置，同时，该程序所调用到的库函数也从各自所在的档案库中连到合适的地方。
gcc的基本用法和选项
在使用gcc编译器的时候，我们必须给出一系列必要的调用参数和文件名称。gcc编译器的调用参数大约有100多个，其中多数参数我们可能根本就用不到，
这里只介绍其中最基本、最常用的参数。
gcc最基本的用法是∶gcc [options] [filenames]
其中options就是编译器所需要的参数，filenames给出相关的文件名称。其中[options]的值可以为下列值：

-c，只编译，不连接成为可执行文件，编译器只是由输入的.c等源代码文件生成.o为后缀的目标文件，通常用于编译不包含主程序的子程序文件。

-o output_filename，确定输出文件的名称为output_filename，同时这个名称不能和源文件同名。如果不给出这个选项，gcc就给出预设的可执行文
件a.out。

-g，产生符号调试工具(GNU的gdb)所必要的符号资讯，要想对源代码进行调试，我们就必须加入这个选项。

-O，对程序进行优化编译、连接，采用这个选项，整个源代码会在编译、连接过程中进行优化处理，这样产生的可执行文件的执行效率可以提高，但是，
编译、连接的速度就相应地要慢一些。

-O2，比-O更好的优化编译、连接，当然整个编译、连接过程会更慢。

-Idirname，将dirname所指出的目录加入到程序头文件目录列表中，是在预编译过程中使用的参数。C程序中的头文件包含两种情况∶

A)#include<myinc.h>

B)#include “myinc.h”

其中，A类使用尖括号(< >)，B类使用双引号(“ ”)。对于A类，预处理程序cpp在系统预设包含文件目录(如/usr/include)中搜寻相应的文件，而对于B类，
cpp在当前目录中搜寻头文件， 这个选项的作用是告诉cpp，如果在当前目录中没有找到需要的文件，就到指定的dirname目录中去寻找。在程序设计中，
如果我们需要的这种包含文件分 别分布在不同的目录中，就需要逐个使用-I选项给出搜索路径。
-Ldirname，将dirname所指出的目录加入到程序函数档案 库文件的目录列表中，是在连接过程中使用的参数。在预设状态下，连接程序ld在系统的预设路
径中(如/usr/lib)寻找所需要的档案库文件，这个选项 告诉连接程序，首先到-L指定的目录中去寻找，然后到系统预设路径中寻找，如果函数库存放在多
个目录下，就需要依次使用这个选项，给出相应的存放目录。
-lname，在连接时，装载名字为“libname.a”的函数库，该函数库位于系统预设的目录或者由-L选项确定的目录下。例如，-lm表示连接名为“libm.a”的数
学函数库。
上面我们简要介绍了gcc编译器最常用的功能和主要参数选项，更为详尽的资料可以参看Linux系统的联机帮助。
为了更加详细的说明GCC参数极其相关的使用方法，我们再换一种方式来说明，以下为自问自答的十个问题：
1、gcc包含的c/c++编译器
gcc、cc、c++、g++；gcc和cc是一样的，c++和g++是一样的，一般c程序就用gcc编译，c++程序就用g++编译
2、gcc的基本用法
gcc test.c这样将编译出一个名为a.out的程序，gcc test.c -o test这样将编译出一个名为test的程序，-o参数用来指定生成程序的名字。
3、为什么会出现undefined reference to 'xxxxx'错误？
首先这是链接错误，不是编译错误，也就是说如果只有这个错误，说明你的程序源码本身没有问题，是你用编译器编译时参数用得不对，你没有指定链接
程序 要用到得库，比如你的程序里用到了一些数学函数，那么你就要在编译参数里指定程序要链接数学库，方法是在编译命令行里加入-lm
